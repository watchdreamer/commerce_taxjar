<?php

/**
 * @file
 * Installation functions for Commerce TaxJar Connector.
 */

/**
 * Implements hook_requirements().
 */
function commerce_taxjar_requirements($phase) {
  $requirements = array();

  // Ensure translations don't break at install time.
  $t = get_t();

  $has_curl = extension_loaded('curl');

  $requirements['commerce_taxjar_curl'] = array(
    'title' => $t('cURL'),
    'value' => $has_curl ? $t('Enabled for Commerce TaxJar') : $t('Not found'),
  );

  if (!$has_curl) {
    $requirements['commerce_taxjar_curl']['severity'] = REQUIREMENT_ERROR;
    $requirements['commerce_taxjar_curl']['description'] = $t('Commerce TaxJar requires PHP cURL extension to be enabled and configured on your server.');
  }
  return $requirements;
}

/**
 * Implements hook_install().
 */
function commerce_taxjar_install() {
  if (module_exists('commerce_tax')) {
    $t = get_t();
    drupal_set_message($t('Commerce TaxJar may conflict with the commerce_tax module.'), 'warning');
  }

  // Configure the TaxJar codes Taxonomy vocabulary.
  $t = get_t();
  $vocabulary = taxonomy_vocabulary_machine_name_load('taxjar_categories');

  if (!$vocabulary) {
    $vocabulary = (object) array(
      'name' => $t('TaxJar Categories'),
      'machine_name' => 'taxjar_categories',
    );
    taxonomy_vocabulary_save($vocabulary);

    // If it doesn't already exist, create field to store codes in.
    if (!field_info_field('taxjar_category_code')) {
      $field = array(
        'field_name' => 'taxjar_category_code',
        'type' => 'text',
        'label' => $t('Category Code'),
        'locked' => TRUE,
      );
      field_create_field($field);

      // Attach field to the vocabulary bundle.
      $instance = array(
        'field_name' => 'taxjar_category_code',
        'entity_type' => 'taxonomy_term',
        'label' => 'TaxJar Category Code',
        'bundle' => 'taxjar_categories',
        'required' => TRUE,
        'widget' => array(
          'type' => 'textfield',
          'weight' => 3,
        ),
      );
      field_create_instance($instance);
    }
  }

  // Add the commerce_taxjar_tax_code field to all product bundles.
  $product_types = array_keys(commerce_product_types());

  // Create the field type if it doesn't exist.
  $field = field_info_field('commerce_taxjar_tax_code');
  if (!$field) {
    $field = field_create_field(array(
      'cardinality' => 1,
      'field_name' => 'commerce_taxjar_tax_code',
      'settings' => array(
        'allowed_values' => array(
          0 => array(
            'vocabulary' => 'taxjar_categories',
          ),
        ),
      ),
      'type' => 'taxonomy_term_reference',
    ));
  }

  // Create the field instance for each product type.
  foreach ($product_types as $type) {
    $instance = field_info_instance('commerce_product', 'commerce_taxjar_tax_code', $type);
    if (!$instance) {
      field_create_instance(array(
        'bundle' => $type,
        'default_value' => NULL,
        'display' => array(
          'default' => array(
            'type' => 'hidden',
          ),
          'teaser' => array(
            'type' => 'hidden',
          ),
        ),
        'entity_type' => 'commerce_product',
        'field_name' => 'commerce_taxjar_tax_code',
        'label' => 'TaxJar Category',
        'widget' => array(
          'module' => 'taxonomy',
          'settings' => array(
            'autocomplete_path' => 'taxonomy/autocomplete',
            'size' => 60,
          ),
          'type' => 'taxonomy_autocomplete',
          'weight' => -4,
        ),
      ));
    }
  }
}

/**
 * Implements hook_uninstall().
 */
function commerce_taxjar_uninstall() {
  // Delete the TaxJar codes Taxonomy.
  if ($vocabulary = taxonomy_vocabulary_machine_name_load('taxjar_categories')) {
    taxonomy_vocabulary_delete($vocabulary->vid);
  }
  $fields_to_delete = array(
    'taxjar_category_code',
    'commerce_taxjar_tax_code',
  );
  foreach ($fields_to_delete as $field_name) {
    // Skip non existing fields.
    if (!field_info_field($field_name)) {
      continue;
    }
    field_delete_field($field_name);
  }
  // Remove all variables defined by the module.
  db_delete('variable')
    ->condition('name', 'commerce_taxjar_%', 'LIKE')
    ->execute();
}
